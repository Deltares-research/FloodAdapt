# Settings { #flood_adapt.Settings }

```python
Settings()
```

The configuration settings for the FloodAdapt database and integrator.

Precedence is as follows: user arguments > environment variables > defaults in this class.
When loading is done, the settings are validated and the environment variables are updated with the loaded values.

If any required settings are missing or invalid, a ValidationError is raised.

## Usage {.doc-section .doc-section-usage}

from flood_adapt import Settings

One of the following:

1) Load settings from environment variables, if no environment variables are set, use defaults defined in the class:
    `settings = Settings()`

2) Load settings from a .toml file, overwriting any environment variables set:
    `settings = Settings.read(toml_path: Path)`

3) Load settings from keyword arguments, overwriting any environment variables:
    `settings = Settings(DATABASE_ROOT="path/to/database", DATABASE_NAME="database_name")`

## Attributes {.doc-section .doc-section-attributes}

<code>[**database_name**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The name of the database. Alias: `DATABASE_NAME` (environment variable).

<code>[**database_root**]{.parameter-name} [:]{.parameter-annotation-sep} [[Path](`pathlib.Path`)]{.parameter-annotation}</code>

:   The root directory of the database. Alias: `DATABASE_ROOT` (environment variable).

<code>[**delete_crashed_runs**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation}</code>

:   Whether to delete crashed/corrupted runs immediately after they are detected. Alias: `DELETE_CRASHED_RUNS` (environment variable).

<code>[**validate_allowed_forcings**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation}</code>

:   Whether to validate the forcing types and sources against the allowed forcings in the event model. Alias: `VALIDATE_ALLOWED_FORCINGS` (environment variable).

<code>[**validate_binaries**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation}</code>

:   Whether to validate the existence of the paths to the SFINCS and FIAT binaries. Alias: `VALIDATE_BINARIES` (environment variable).

<code>[**sfincs_bin_path**]{.parameter-name} [:]{.parameter-annotation-sep} [[Path](`pathlib.Path`)]{.parameter-annotation}</code>

:   The path to the SFINCS binary. Alias: `SFINCS_BIN_PATH` (environment variable).

<code>[**fiat_bin_path**]{.parameter-name} [:]{.parameter-annotation-sep} [[Path](`pathlib.Path`)]{.parameter-annotation}</code>

:   The path to the FIAT binary. Alias: `FIAT_BIN_PATH` (environment variable).

## Properties {.doc-section .doc-section-properties}

database_path : Path
    The full path to the database.

## Raises {.doc-section .doc-section-raises}

<code>[:]{.parameter-annotation-sep} [[ValidationError](`ValidationError`)]{.parameter-annotation}</code>

:   If required settings are missing or invalid.

## Methods

| Name | Description |
| --- | --- |
| [read](#flood_adapt.Settings.read) | Parse the configuration file and return the parsed settings. |
| [write](#flood_adapt.Settings.write) | Write the configuration settings to a .toml file. |

### read { #flood_adapt.Settings.read }

```python
Settings.read(toml_path: Path)
```

Parse the configuration file and return the parsed settings.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**toml_path**]{.parameter-name} [:]{.parameter-annotation-sep} [[Path](`pathlib.Path`)]{.parameter-annotation}</code>

:   The path to the configuration file.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Settings](`flood_adapt.config.config.Settings`)]{.parameter-annotation}</code>

:   The parsed configuration settings.

#### Raises {.doc-section .doc-section-raises}

<code>[:]{.parameter-annotation-sep} [[ValidationError](`ValidationError`)]{.parameter-annotation}</code>

:   If required configuration values are missing or if there is an error parsing the configuration file.

### write { #flood_adapt.Settings.write }

```python
Settings.write(toml_path: Path)
```

Write the configuration settings to a .toml file.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**toml_path**]{.parameter-name} [:]{.parameter-annotation-sep} [[Path](`pathlib.Path`)]{.parameter-annotation}</code>

:   The path to the configuration file.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [None]{.parameter-annotation}</code>

:
