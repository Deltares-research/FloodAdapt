# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#


[changelog]
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""

body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% if message %}
  {{message}}
{% endif %}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}({{ commit.scope }}) {% endif %}\
          {% if commit.breaking %}[**breaking**] {% endif %}\
          {{ commit.message | upper_first }}
    {% endfor %}
{% endfor %}\n
"""
footer = """
<!-- generated by git-cliff -->
"""

trim = true
postprocessors = [
  { pattern = '<REPO>', replace = "https://github.com/Deltares-research/FloodAdapt" }, # replace repository URL
]

# render body even when there are no releases to process
render_always = true
output = "CHANGELOG.md"

[git]
conventional_commits = true
filter_unconventional = true
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  { pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->🚀 Features" },
  { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "^doc", group = "<!-- 2 -->📚 Documentation" },
  { message = "^refactor", group = "<!-- 3 -->🚜 Refactor" },
  { message = "^test", group = "<!-- 4 -->🧪 Testing" },
  { message = "^ci|^dep|^style", group = "<!-- 5 -->⚙️ Miscellaneous Tasks" },
  { message = "^revert", group = "<!-- 6 -->◀️ Revert" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = true
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"

use_branch_tags = false
